# 20240201

# 저장되어 있는 자료 중에서 원하는 항목을 찾는 작업
# 순차검색 / 이진검색

# 2가지 경우
# 정렬되어 있지 않은 경우 / 정렬되어 있는 경우

# 이진 검색
# 하기 위해서는 자료가 정렬되어 있어야 한다.

# ex) 이진검색으로 7을 찾는 경우

#    2 4 7 9 11 19 23
#    0 1 2 3  4  5  6 

# 어떻게 구현 ?
# 검색 범위의 시작점과 종료점을 이용하여 검색을 반복 수행한다.
# 이진 검색의 경우, 자료에 삽입이나 삭제가 발생했을 때, 배열의 상태를
# 항상 정렬 상태로 유지하는 추가 작업이 필요하다.

# 하기 위해서는 자료자 정렬되어 있어야한다.
# 이진 탐색 알고리즘
def binarySearch(arr,N,key):
    start = 0
    # 구간 초기화
    end = N-1
    while start <= end:
    # 검색 구간이 유효하면 반복
        middle = (start + end) // 2
        # 중앙원소 인덱스
        if arr[middle] == key:
            #검색 성공
            return middle
        elif arr[middle] > key:
            # 중앙값이 키보다 크면
            end = middle -1
        else:         
            # 키보다 작으면
            start = middle + 1
    return -1   # 검색실패


# 항상 index 접근
# 이진 검색
# 중앙을 먼저 찾아본다.





# 선택 정렬
#